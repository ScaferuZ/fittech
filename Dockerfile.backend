# Backend Dockerfile - Flask API
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend source code
COPY backend/ ./backend/
COPY data/ ./data/
COPY scripts/ ./scripts/

# Set Python path to include backend directory
ENV PYTHONPATH=/app/backend:/app/backend/src:$PYTHONPATH

# Change to backend directory
WORKDIR /app/backend

# Create necessary directories
RUN mkdir -p logs models/saved

# Copy pre-trained models (much faster than training during build)
# This avoids memory/CPU issues on resource-constrained VPS
COPY backend/models/ ./models/

# Verify models exist or provide fallback
RUN if [ -f "./models/xgfitness_ai_model.pkl" ]; then \
        echo "‚úÖ Pre-trained models copied successfully"; \
        ls -la ./models/*.pkl; \
    else \
        echo "‚ö†Ô∏è  Pre-trained models not found"; \
        echo "üìù Models will be trained on first API request"; \
        echo "üí° This is safer for resource-constrained environments"; \
    fi

# Expose port 5000
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health')" || exit 1

# Run the Flask application
CMD ["python", "app.py"] 